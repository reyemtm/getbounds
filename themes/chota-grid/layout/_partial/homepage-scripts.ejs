<script>
  /*!
  * Run a callback function after scrolling has stopped
  * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
  * @param  {Function} callback The function to run after scrolling
  */
  function scrollStop(callback) {
    if (!callback || typeof callback !== 'function') return;
    var isScrolling;
    window.addEventListener('scroll', function (event) {
      window.clearTimeout(isScrolling);
      isScrolling = setTimeout(function () {
        callback();
      }, 66);

    }, false);

  };
  var modal = document.getElementsByClassName("modal")[0];
  if (modal) {
      modal.addEventListener("click", function (e) {
      if (!e.target.src) {
        modal.classList.remove("modal-active")
      }
    })
  }
  var leftX = 0,
    topY = 0;
  document.addEventListener('mousedown', function (e) {
    leftX = e.pageX;
    topY = e.pageY;
  });
  document.addEventListener('mouseup', function (e) {
    if (leftX != e.pageX || topY != e.pageY || !e.target.src) {
      return
    } else {
      if (e.target.classList.contains("portfolio-img")) {
        var img = modal.getElementsByTagName("img")[0];
        img.src = e.target.src
        // if (e.target.dataset.info) {
        //   modal.querySelector("figcaption").innerText = e.target.dataset.info
        // }
        modal.classList.add("modal-active")
      }
    }
  });
</script>

<script>
  /*
    * TouchScroll - using dom overflow:scroll
    * by kmturley https://github.com/kmturley/touch-scroll/blob/master/js/TouchScroll.js
    */

  var TouchScroll = function () {
    'use strict';

    var module = {
      axis: 'x',
      drag: false,
      zoom: 1,
      time: 0.04,
      ignoreDraggableElements: false,
      isIE: window.navigator.userAgent.toLowerCase().indexOf('msie') > -1,
      isFirefox: window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1,
      /**
       * @method init
       */
      init: function (options) {
        var me = this;
        this.options = options;

        if (options && options.id) {
          this.el = document.querySelector(options.id);
        }
        if (!this.el) {
          if (this.isIE || this.isFirefox) {
            this.el = document.documentElement;
          } else {
            this.el = document.body;
          }
        }

        if (options && options.ignoreDraggableElements) {
          this.ignoreDraggableElements = true;
        }

        if (options.draggable === true) {
          if (this.isIE) {
            document.ondragstart = function () { return false; };
          }
          if (this.isIE || this.isFirefox) {
            this.body = document.documentElement;
          } else {
            this.body = document.body;
          }
          this.addEvent('mousedown', this.el, function (e) { me.onMouseDown(e); });
          this.addEvent('mousemove', this.el, function (e) { me.onMouseMove(e); });
          this.addEvent('mouseup', this.body, function (e) { me.onMouseUp(e); });
        }

        if (options && options.zoom) {
          this.elzoom = document.getElementById(options.zoom);
          if (this.isFirefox) {
            this.addEvent('DOMMouseScroll', this.el, function (e) { me.onMouseWheel(e); });
          } else {
            this.addEvent('mousewheel', this.el, function (e) { me.onMouseWheel(e); });
          }
        }

        if (options && options.prev) {
          this.prev = document.getElementById(options.prev);
          this.addEvent('mousedown', this.prev, function (e) {
            me.onMouseDown(e);
          });
          this.addEvent('mouseup', this.prev, function (e) {
            me.diffx = options.distance ? (-options.distance / 11) : -11;
            me.onMouseUp(e);
          });
        }
        if (options && options.next) {
          this.next = document.getElementById(options.next);
          this.addEvent('mousedown', this.next, function (e) {
            me.onMouseDown(e);
          });
          this.addEvent('mouseup', this.next, function (e) {
            me.diffx = options.distance ? (options.distance / 11) : 11;
            me.onMouseUp(e);
          });
        }
      },

      addEvent: function (name, el, func) {
        if (el.addEventListener) {
          el.addEventListener(name, func, false);
        } else if (el.attachEvent) {
          el.attachEvent('on' + name, func);
        } else {
          el[name] = func;
        }
      },

      cancelEvent: function (e) {
        if (!e) { e = window.event; }
        if (e.target && e.target.nodeName === 'IMG') {
          e.preventDefault();
        } else if (e.srcElement && e.srcElement.nodeName === 'IMG') {
          e.returnValue = false;
        }
      },

      onMouseDown: function (e) {
        if (this.ignoreDraggableElements && e.target.draggable) {
          return;
        }

        if (this.drag === false || this.options.wait === false) {
          // ignore mousedown event if emitted on scrollbar
          this.drag = e.offsetX <= e.target.clientWidth && e.offsetY <= e.target.clientHeight;
          this.cancelEvent(e);
          this.startx = e.clientX + this.el.scrollLeft;
          this.starty = e.clientY + this.el.scrollTop;
          this.diffx = 0;
          this.diffy = 0;
        }
      },

      onMouseMove: function (e) {
        if (this.drag === true) {
          this.cancelEvent(e);
          this.diffx = (this.startx - (e.clientX + this.el.scrollLeft));
          this.diffy = (this.starty - (e.clientY + this.el.scrollTop));
          this.el.scrollLeft += this.diffx;
          this.el.scrollTop += this.diffy;
        }
      },

      onMouseUp: function (e) {
        if (this.drag === true) {
          if (!this.options.wait) {
            this.drag = null;
          }
          this.cancelEvent(e);
          var me = this,
            start = 1,
            animate = function () {
              var step = Math.sin(start);
              if (step <= 0) {
                me.diffx = 0;
                me.diffy = 0;
                window.cancelAnimationFrame(animate);
                me.drag = false;
              } else {
                me.el.scrollLeft += me.diffx * step;
                me.el.scrollTop += me.diffy * step;
                start -= me.time;
                window.requestAnimationFrame(animate);
              }
            };
          animate();
        }
      },

      onMouseWheel: function (e) {
        this.cancelEvent(e);
        if (e.detail) {
          this.zoom -= e.detail;
        } else {
          this.zoom += (e.wheelDelta / 1200);
        }
        if (this.zoom < 1) {
          this.zoom = 1;
        } else if (this.zoom > 10) {
          this.zoom = 10;
        }
        /*
        this.elzoom.style.OTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
        this.elzoom.style.MozTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
        this.elzoom.style.msTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
        this.elzoom.style.WebkitTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
        this.elzoom.style.transform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
        */
        this.elzoom.style.zoom = this.zoom * 100 + '%';
        //this.el.scrollLeft += e.wheelDelta / 10;
        //this.el.scrollTop += e.wheelDelta / 8;
      }
    };
    return module;
  };

  var viewer = new TouchScroll();
  viewer.init({
    id: '.portfolio',
    draggable: true,
    wait: false
  });

</script>