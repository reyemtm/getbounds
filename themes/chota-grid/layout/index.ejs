<div class="landing-page">
  <header class="hero">
    <img class="hero--background-img" src="/assets/img/lg_cover_dem_rivers_wide.webp" alt="Background Image of a River"></img>
    <div class="hero--inner">
      <h1 class="hero--title"><%- config.title %> <span style="font-size: 1rem">by <%- config.author %></span></h1>
      <h2 class="hero--subtitle"><%- config.tagline %></h2>
      <a class="hero--btn" href="#footer">Contact</a>
    </div>
  </header>
  <main>

    <section id="blog">
      <!-- <h2 class="fw6">Recent Posts</h2> -->
      <div class="blog">
        <% page.posts.sort('date', -1).each(function(post, i) {%>
          <%- partial('_partial/post_card', {post: post}) %>
        <%})%>
      </div>
      <div>
        <a href="/blog" class="hero--btn inverse">View All</a>
      </div>
    </section>

    <section id="code" class='code inverse'>
      <h2 class="section--heading">Code</h2>
      <div>
        <% for (var i in site.data.repos) { %>
          <% if (i < 10) {%>
          <article style="padding:1rem;background: hsl(0deg 0% 10%);border-radius:3px;margin-bottom: 2rem;">
            <header>
              <a href="<%= site.data.repos[i].repo%>" style="color:white;"><strong><%= site.data.repos[i].name %></strong></a>
            </header>
            <main style="margin: 1rem 0;font-weight: 300">
              <%= site.data.repos[i].description %>
              <% if (site.data.repos[i].homepage) {%>
                <div><br /><a href="<%= site.data.repos[i].homepage %>" style="color:#049DBF;">Demo</a></div>
              <%}%>
              </main>
            <footer style="opacity: 0.8;">
              <%= site.data.repos[i].language %><% if (site.data.repos[i].forks) {%> <span style="float:right;display:flex;"><img alt="code fork icon" src="https://icongr.am/fontawesome/code-fork.svg?size=20&color=eeeeee">&nbsp;<%= site.data.repos[i].forks %></span><%}%><% if (site.data.repos[i].stars) {%> <span style="float:right;display:flex;"><img alt="star icon"src="https://icongr.am/fontawesome/star.svg?size=20&color=eeeeee">&nbsp;<%= site.data.repos[i].stars %>&nbsp;&nbsp;</span><%}%>
            </footer>
          </article>
          <%}%>
        <% } %>
        <a href="https://github.com/reyemtm?tab=repositories" style="text-decoration: underline;">View More on GitHub</a>
      </div>
    </section>

    <section id="portfolio" class="full">
      <h2 class="section--heading">Portfolio</h2>
      <div class="portfolio">
        <img class="portfolio-img" src="/assets/img/md_storelocate.webp" alt="Portfolio Image" loading=lazy>
        <img class="portfolio-img" alt="Portfolio Image" src="/assets/img/lg_08-ohio-vehicle-crash-explorer-with-heatmap.webp" loading=lazy>
        <img class="portfolio-img" alt="Portfolio Image" src="/assets/img/lg_04-zanesville-zoning-interactive-web-map.webp" loading=lazy>
        <img class="portfolio-img" alt="Portfolio Image" src="/assets/img/lg_01-ohio-block-group-explorer-explorer-story-with-3d-views.webp" loading=lazy>
        <img class="portfolio-img" alt="Portfolio Image" src="https://www.malcolmmeyer.com/img/06-gpx-visualization-web-application.png" loading=lazy>
      </div>
      <div class="center">
        <a href="https://malcolmmeyer.com" class="hero--btn inverse">Full Portfolio</a>
      </div>

    </section>

    <section id="about" class="inverse">
      <h2 class="section--heading">About</h2>
      <div>

        <p>
          <strong>getBounds</strong> is a portfolio and blog desgined and maintained by Malcolm Meyer. I have ten years of experience in geospatial sector and a passion for ecology, maps, open source software, urban planning, and web design. I create projects using a variety of software and tools. Some of my favorite tools include Leaflet JS, Mapbox GL JS, Postgres/PostGIS and QGIS. Feel free to contact me using the form below or on twitter <a href="https://twitter.com/getbounds">@getbounds</a>.
        </p>
        <!-- <h3>Analysis</h3> -->
        <!-- <p>From data cleaning to geocoding to advanced geospatial analysis, I strive to find the most appropriate and cost effective data analysis solutions to fulfill project requirements.</p>
        <h3>Print & Web </h3>
        <p>I have five years of experience building responsive web applications built with Mapbox GL J and two years of experience creating print layouts in QGIS. I have received awards from both state and national organizations for several of these map products.</p>
        <h3>Web Applications</h3>
        <p>I have experience building full stack, responsive web applications using a variety of tools including NodeJS, Postgres, and Firebase. Let me help your organization bring desktop-based workflows to life with the power of the modern web.</p> -->

      </div>
    </section>

    <section id="contact">
      <h2 class="section--heading">Contact</h2>
      <div>

        <form class="grid" style="grid-row-gap: 1rem" name="contact" method="POST" data-netlify="true">
          <label for="name">Name</label>
          <input type="text" id="name" name="name" placeholder="Jane Doe">
      
          <label for="email">Email</label>
          <input type="email" id="email" name="email" placeholder="jdoe@email.com" >
      
          <label for="message">Message</label>
          <textarea id="message" name="message" placeholder="Message..." style="height:200px"></textarea>
      
          <button type="submit">Submit</button>
        </form>

      </div>
    </section>
  </main>
  <div class="modal">
    <div class="modal-content">
      <picture>
        <img src="" alt="Portfolio Image">
      </picture>
      <figcaption></figcaption>
    </div>
  </div>
</div>
<script>
  /*!
  * Run a callback function after scrolling has stopped
  * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
  * @param  {Function} callback The function to run after scrolling
  */
  function scrollStop(callback) {

  // Make sure a valid callback was provided
  if (!callback || typeof callback !== 'function') return;

    // Setup scrolling variable
    var isScrolling;

    // Listen for scroll events
    window.addEventListener('scroll', function (event) {

      // Clear our timeout throughout the scroll
      window.clearTimeout(isScrolling);

      // Set a timeout to run after scrolling ends
      isScrolling = setTimeout(function() {

        // Run the callback
        callback();

      }, 66);

    }, false);

  };

var modal = document.getElementsByClassName("modal")[0];

modal.addEventListener("click", function(e) {
 if (!e.target.src) {
  modal.classList.remove("modal-active")
 }
})

var leftX  = 0,
    topY   = 0;    

document.addEventListener('mousedown', function(e) {
  leftX = e.pageX;
  topY   = e.pageY;
});

document.addEventListener('mouseup', function(e) {
  if (leftX != e.pageX || topY != e.pageY || !e.target.src) {
    return
  }else{
    if (e.target.classList.contains("portfolio-img")) {
      var img = modal.getElementsByTagName("img")[0];
      img.src = e.target.src
      // if (e.target.dataset.info) {
      //   modal.querySelector("figcaption").innerText = e.target.dataset.info
      // }
      modal.classList.add("modal-active")
    }
  }
});
</script>

<script>
/*
 * TouchScroll - using dom overflow:scroll
 * by kmturley https://github.com/kmturley/touch-scroll/blob/master/js/TouchScroll.js
 */

/*globals window, document */

var TouchScroll = function () {
    'use strict';
    
    var module = {
        axis: 'x',
        drag: false,
        zoom: 1,
        time: 0.04,
        ignoreDraggableElements: false,
        isIE: window.navigator.userAgent.toLowerCase().indexOf('msie') > -1,
        isFirefox: window.navigator.userAgent.toLowerCase().indexOf('firefox') > -1,
        /**
         * @method init
         */
        init: function (options) {
            var me = this;
            this.options = options;
            
            // find target element or fall back to body
            if (options && options.id) {
                this.el = document.querySelector(options.id);
            }
            if (!this.el) {
                if (this.isIE || this.isFirefox) {
                    this.el = document.documentElement;
                } else {
                    this.el = document.body;
                }
            }

            // ignore scrolling for draggbles e.g. when img dragable
            if (options && options.ignoreDraggableElements) {
                this.ignoreDraggableElements = true;
              }

            // if draggable option is enabled add events
            if (options.draggable === true) {
                if (this.isIE) {
                    document.ondragstart = function () { return false; };
                }
                if (this.isIE || this.isFirefox) {
                    this.body = document.documentElement;
                } else {
                    this.body = document.body;
                }
                this.addEvent('mousedown', this.el, function (e) { me.onMouseDown(e); });
                this.addEvent('mousemove', this.el, function (e) { me.onMouseMove(e); });
                this.addEvent('mouseup', this.body, function (e) { me.onMouseUp(e); });
            }
            
            // if zoom option exists add mouse wheel functionality to element
            if (options && options.zoom) {
                this.elzoom = document.getElementById(options.zoom);
                if (this.isFirefox) {
                    this.addEvent('DOMMouseScroll', this.el, function (e) { me.onMouseWheel(e); });
                } else {
                    this.addEvent('mousewheel', this.el, function (e) { me.onMouseWheel(e); });
                }
            }
            
            // if scroll options exist add events
            if (options && options.prev) {
                this.prev = document.getElementById(options.prev);
                this.addEvent('mousedown', this.prev, function (e) {
                    me.onMouseDown(e);
                });
                this.addEvent('mouseup', this.prev, function (e) {
                    me.diffx = options.distance ? (-options.distance / 11) : -11;
                    me.onMouseUp(e);
                });
            }
            if (options && options.next) {
                this.next = document.getElementById(options.next);
                this.addEvent('mousedown', this.next, function (e) {
                    me.onMouseDown(e);
                });
                this.addEvent('mouseup', this.next, function (e) {
                    me.diffx = options.distance ? (options.distance / 11) : 11;
                    me.onMouseUp(e);
                });
            }
        },
        /**
         * @method addEvent
         */
        addEvent: function (name, el, func) {
            if (el.addEventListener) {
                el.addEventListener(name, func, false);
            } else if (el.attachEvent) {
                el.attachEvent('on' + name, func);
            } else {
                el[name] = func;
            }
        },
        /**
         * @method cancelEvent
         */
        cancelEvent: function (e) {
            if (!e) { e = window.event; }
            if (e.target && e.target.nodeName === 'IMG') {
                e.preventDefault();
            } else if (e.srcElement && e.srcElement.nodeName === 'IMG') {
                e.returnValue = false;
            }
        },
        /**
         * @method onMouseDown
         */
        onMouseDown: function (e) {
            if( this.ignoreDraggableElements && e.target.draggable ) {
                return;
            } 
            
            if (this.drag === false || this.options.wait === false) {
                // ignore mousedown event if emitted on scrollbar
                this.drag = e.offsetX <= e.target.clientWidth && e.offsetY <= e.target.clientHeight;
                this.cancelEvent(e);
                this.startx = e.clientX + this.el.scrollLeft;
                this.starty = e.clientY + this.el.scrollTop;
                this.diffx = 0;
                this.diffy = 0;
            }
        },
        /**
         * @method onMouseMove
         */
        onMouseMove: function (e) {
            if (this.drag === true) {
                this.cancelEvent(e);
                this.diffx = (this.startx - (e.clientX + this.el.scrollLeft));
                this.diffy = (this.starty - (e.clientY + this.el.scrollTop));
                this.el.scrollLeft += this.diffx;
                this.el.scrollTop += this.diffy;
            }
        },
        /**
         * @method onMouseMove
         */
        onMouseUp: function (e) {
            if (this.drag === true) {
                if (!this.options.wait) {
                    this.drag = null;
                }
                this.cancelEvent(e);
                var me = this,
                    start = 1,
                    animate = function () {
                        var step = Math.sin(start);
                        if (step <= 0) {
                            me.diffx = 0;
                            me.diffy = 0;
                            window.cancelAnimationFrame(animate);
                            me.drag = false;
                        } else {
                            me.el.scrollLeft += me.diffx * step;
                            me.el.scrollTop += me.diffy * step;
                            start -= me.time;
                            window.requestAnimationFrame(animate);
                        }
                    };
                animate();
            }
        },
        /**
         * @method onMouseMove
         */
        onMouseWheel: function (e) {
            this.cancelEvent(e);
            if (e.detail) {
                this.zoom -= e.detail;
            } else {
                this.zoom += (e.wheelDelta / 1200);
            }
            if (this.zoom < 1) {
                this.zoom = 1;
            } else if (this.zoom > 10) {
                this.zoom = 10;
            }
            /*
            this.elzoom.style.OTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
            this.elzoom.style.MozTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
            this.elzoom.style.msTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
            this.elzoom.style.WebkitTransform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
            this.elzoom.style.transform = 'scale(' + this.zoom + ', ' + this.zoom + ')';
            */
            this.elzoom.style.zoom = this.zoom * 100 + '%';
            //this.el.scrollLeft += e.wheelDelta / 10;
            //this.el.scrollTop += e.wheelDelta / 8;
        }
    };
    return module;
};

var viewer = new TouchScroll();
  viewer.init({
      id: '.portfolio',
      draggable: true,
      wait: false
  });

</script>